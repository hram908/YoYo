/**
 * 
 */
package com.asktun.mg;

import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;

import com.asktun.mg.bean.GameInfo;
import com.asktun.mg.bean.LoginBean;
import com.asktun.mg.bean.UpdateLngLat;
import com.asktun.mg.utils.SoundPlayer;
import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.chen.jmvc.util.Application;
import com.chen.jmvc.util.IResponseListener;
import com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.QueueProcessingType;

public class MyApp extends Application {

<<<<<<< .mine
=======
	public static boolean isSoundEnable = true;
	public static boolean isVibrateEnable = false;
>>>>>>> .r533
	
	private static MyApp mInstance = null;
	public static final int NUM_PAGE = 6;// 总共有多少页
	public static int NUM = 20;// 每页20个表情,还有最后一个删除button
	private Map<String, Integer> mFaceMap = new LinkedHashMap<String, Integer>();

	private LoginBean loginbean;

	private GameInfo downloadSuccess;
	private GameInfo startDownloadMovieItem; // 需要下载的任务

	public LocationClient mLocationClient = null;
	public MyLocationListenner myListener = new MyLocationListenner();
	public BDLocation mLocation;

	@Override
	public void onCreate() {
		super.onCreate();
		mInstance = this;
		initFaceMap();
		initImageLoader(getApplicationContext());
		mLocationClient = new LocationClient(this);
		setLocationOption();
		startLocation();
		SoundPlayer.init(this);
	}

	@Override
	public void onTerminate() {
		// TODO Auto-generated method stub
		super.onTerminate();
	}

	public static MyApp getInstance() {
		return mInstance;
	}

	public static void initImageLoader(Context context) {
		// This configuration tuning is custom. You can tune every option, you
		// may tune some of them,
		// or you can create default configuration by
		// ImageLoaderConfiguration.createDefault(this);
		// method.
		ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(
				context).threadPriority(Thread.NORM_PRIORITY - 2)
				.denyCacheImageMultipleSizesInMemory()
				.discCacheFileNameGenerator(new Md5FileNameGenerator())
				.tasksProcessingOrder(QueueProcessingType.LIFO)
				.writeDebugLogs() // Remove for release app
				.build();
		// Initialize ImageLoader with configuration.
		ImageLoader.getInstance().init(config);
	}

	@Override
	public android.app.ProgressDialog getProgressDialog(Activity act) {
		return new ProgressDialog(act);
	}

	private Map<String, Activity> activityList = new HashMap<String, Activity>();

	// 添加Activity 到容器中
	public void addActivity(Activity activity) {
		activityList.put(activity.getLocalClassName(), activity);
	}

	public void removeActivity(Activity activity) {
		if (activityList.containsKey(activity.getLocalClassName()))
			activityList.remove(activity.getLocalClassName());
	};

	// 遍历所存所有Activity 并finish
	public void clearActivity() {
		Iterator<Entry<String, Activity>> iter = activityList.entrySet()
				.iterator();
		while (iter.hasNext()) {
			Entry<String, Activity> entry = iter.next();
			Activity activity = entry.getValue();
			activity.finish();
		}
		activityList.clear();
	}

	private void initFaceMap() {

		mFaceMap.put("[微笑]", R.drawable.smiley_0);
		mFaceMap.put("[撇嘴]", R.drawable.smiley_1);
		mFaceMap.put("[色]", R.drawable.smiley_2);
		mFaceMap.put("[发呆]", R.drawable.smiley_3);
		mFaceMap.put("[得意]", R.drawable.smiley_4);
		mFaceMap.put("[流泪]", R.drawable.smiley_5);
		mFaceMap.put("[害羞]", R.drawable.smiley_6);
		mFaceMap.put("[闭嘴]", R.drawable.smiley_7);
		mFaceMap.put("[睡]", R.drawable.smiley_8);
		mFaceMap.put("[大哭]", R.drawable.smiley_9);
		mFaceMap.put("[尴尬]", R.drawable.smiley_10);
		mFaceMap.put("[发怒]", R.drawable.smiley_11);
		mFaceMap.put("[调皮]", R.drawable.smiley_12);
		mFaceMap.put("[呲牙]", R.drawable.smiley_13);
		mFaceMap.put("[惊讶]", R.drawable.smiley_14);
		mFaceMap.put("[难过]", R.drawable.smiley_15);
		mFaceMap.put("[酷]", R.drawable.smiley_16);
		mFaceMap.put("[非典]", R.drawable.smiley_17);
		mFaceMap.put("[抓狂]", R.drawable.smiley_18);
		mFaceMap.put("[吐]", R.drawable.smiley_19);
		mFaceMap.put("[偷笑]", R.drawable.smiley_20);
		mFaceMap.put("[可爱]", R.drawable.smiley_21);
		mFaceMap.put("[白眼]", R.drawable.smiley_22);
		mFaceMap.put("[傲慢]", R.drawable.smiley_23);
		mFaceMap.put("[饥饿]", R.drawable.smiley_24);
		mFaceMap.put("[困]", R.drawable.smiley_25);
		mFaceMap.put("[惊恐]", R.drawable.smiley_26);
		mFaceMap.put("[流汗]", R.drawable.smiley_27);
		mFaceMap.put("[憨笑]", R.drawable.smiley_28);
		mFaceMap.put("[大兵]", R.drawable.smiley_29);
		mFaceMap.put("[奋斗]", R.drawable.smiley_30);
		mFaceMap.put("[咒骂]", R.drawable.smiley_31);
		mFaceMap.put("[疑问]", R.drawable.smiley_32);
		mFaceMap.put("[嘘]", R.drawable.smiley_33);
		mFaceMap.put("[晕]", R.drawable.smiley_34);
		mFaceMap.put("[折磨]", R.drawable.smiley_35);
		mFaceMap.put("[衰]", R.drawable.smiley_36);
		mFaceMap.put("[骷髅]", R.drawable.smiley_37);
		mFaceMap.put("[敲打]", R.drawable.smiley_38);
		mFaceMap.put("[再见]", R.drawable.smiley_39);
		mFaceMap.put("[擦汗]", R.drawable.smiley_40);
		mFaceMap.put("[抠鼻]", R.drawable.smiley_41);
		mFaceMap.put("[鼓掌]", R.drawable.smiley_42);
		mFaceMap.put("[糗大了]", R.drawable.smiley_43);
		mFaceMap.put("[坏笑]", R.drawable.smiley_44);
		mFaceMap.put("[左哼哼]", R.drawable.smiley_45);
		mFaceMap.put("[右哼哼]", R.drawable.smiley_46);
		mFaceMap.put("[哈欠]", R.drawable.smiley_47);
		mFaceMap.put("[鄙视]", R.drawable.smiley_48);
		mFaceMap.put("[委屈]", R.drawable.smiley_49);
		mFaceMap.put("[快哭了]", R.drawable.smiley_50);
		mFaceMap.put("[阴险]", R.drawable.smiley_51);
		mFaceMap.put("[亲亲]", R.drawable.smiley_52);
		mFaceMap.put("[吓]", R.drawable.smiley_53);
		mFaceMap.put("[可怜]", R.drawable.smiley_54);
		mFaceMap.put("[菜刀]", R.drawable.smiley_55);
		mFaceMap.put("[西瓜]", R.drawable.smiley_56);
		mFaceMap.put("[啤酒]", R.drawable.smiley_57);
		mFaceMap.put("[篮球]", R.drawable.smiley_58);
		mFaceMap.put("[乒乓]", R.drawable.smiley_59);
		mFaceMap.put("[咖啡]", R.drawable.smiley_60);
		mFaceMap.put("[饭]", R.drawable.smiley_61);
		mFaceMap.put("[猪头]", R.drawable.smiley_62);
		mFaceMap.put("[玫瑰]", R.drawable.smiley_63);
		mFaceMap.put("[凋谢]", R.drawable.smiley_64);
		mFaceMap.put("[男]", R.drawable.smiley_65);
		mFaceMap.put("[爱心]", R.drawable.smiley_66);
		mFaceMap.put("[心碎]", R.drawable.smiley_67);
		mFaceMap.put("[蛋糕]", R.drawable.smiley_68);
		mFaceMap.put("[闪电]", R.drawable.smiley_69);
		mFaceMap.put("[炸弹]", R.drawable.smiley_70);
		mFaceMap.put("[刀]", R.drawable.smiley_71);
		mFaceMap.put("[足球]", R.drawable.smiley_72);
		mFaceMap.put("[瓢虫]", R.drawable.smiley_73);
		mFaceMap.put("[便便]", R.drawable.smiley_74);
		mFaceMap.put("[月亮]", R.drawable.smiley_75);
		mFaceMap.put("[太阳]", R.drawable.smiley_76);
		mFaceMap.put("[礼物]", R.drawable.smiley_77);
		mFaceMap.put("[拥抱]", R.drawable.smiley_78);
		mFaceMap.put("[强]", R.drawable.smiley_79);
		mFaceMap.put("[弱]", R.drawable.smiley_80);
		mFaceMap.put("[握手]", R.drawable.smiley_81);
		mFaceMap.put("[胜利]", R.drawable.smiley_82);
		mFaceMap.put("[抱拳]", R.drawable.smiley_83);
		mFaceMap.put("[勾引]", R.drawable.smiley_84);
		mFaceMap.put("[拳头]", R.drawable.smiley_85);
		mFaceMap.put("[差劲]", R.drawable.smiley_86);
		mFaceMap.put("[爱你]", R.drawable.smiley_87);
		mFaceMap.put("[NO]", R.drawable.smiley_88);
		mFaceMap.put("[OK]", R.drawable.smiley_89);
		mFaceMap.put("[爱情]", R.drawable.smiley_90);
		mFaceMap.put("[飞吻]", R.drawable.smiley_91);
		mFaceMap.put("[跳跳]", R.drawable.smiley_92);
		mFaceMap.put("[发抖]", R.drawable.smiley_93);
		mFaceMap.put("[怄火]", R.drawable.smiley_94);
		mFaceMap.put("[转圈]", R.drawable.smiley_95);
		mFaceMap.put("[磕头]", R.drawable.smiley_96);
		mFaceMap.put("[回头]", R.drawable.smiley_97);
		mFaceMap.put("[跳绳]", R.drawable.smiley_98);
		mFaceMap.put("[挥手]", R.drawable.smiley_99);
		mFaceMap.put("[激动]", R.drawable.smiley_100);
		mFaceMap.put("[街舞]", R.drawable.smiley_101);
		mFaceMap.put("[献吻]", R.drawable.smiley_102);
		mFaceMap.put("[左太极]", R.drawable.smiley_103);
		mFaceMap.put("[右太极]", R.drawable.smiley_104);
	}

	public Map<String, Integer> getFaceMap() {
		if (!mFaceMap.isEmpty())
			return mFaceMap;
		return null;
	}

	/**
	 * 获取登录信息
	 * 
	 * @return
	 */
	public LoginBean getLoginbean() {
		return loginbean;
	}

	public void setLoginbean(LoginBean loginbean) {
		this.loginbean = loginbean;
	}

	public GameInfo getDownloadSuccess() {
		return downloadSuccess;
	}

	public void setDownloadSuccess(GameInfo downloadSuccess) {
		this.downloadSuccess = downloadSuccess;
	}

	public GameInfo getStartDownloadMovieItem() {
		return startDownloadMovieItem;
	}

	public void setStartDownloadMovieItem(GameInfo startDownloadMovieItem) {
		this.startDownloadMovieItem = startDownloadMovieItem;
	}

	// 设置相关参数
	private void setLocationOption() {
		LocationClientOption option = new LocationClientOption();
		option.setCoorType("bd09ll"); // 设置坐标类型
		option.setServiceName("com.baidu.location.service_v2.9");
		option.setPoiExtraInfo(true);
		option.setAddrType("all");
		option.setScanSpan(300000);
		option.setPoiNumber(10);
		option.disableCache(true);
		mLocationClient.setLocOption(option);
	}

	public void startLocation() {
		if (!mLocationClient.isStarted()) {
			mLocationClient.registerLocationListener(myListener);
			mLocationClient.start();
			mLocationClient.requestLocation();
		}
	}

	public void stopLocation() {
		if (mLocationClient.isStarted()) {
			mLocationClient.unRegisterLocationListener(myListener);
			mLocationClient.stop();
		}
	}

	/**
	 * 监听函数，又新位置的时候，格式化成字符串，输出到屏幕中
	 */
	public class MyLocationListenner implements BDLocationListener {
		@Override
		public void onReceiveLocation(BDLocation location) {
			if (location == null)
				return;
			String lng = "";
			String lat = "";
			mLocation = location;
			lat = location.getLatitude() + "";
			lng = location.getLongitude() + "";
			if (loginbean != null) {
				HashMap<String, Object> params = new HashMap<String, Object>();
				params.put("user_id", loginbean.user_id);
				params.put("token", loginbean.token);
				params.put("long", lng);
				params.put("lati", lat);
				UIDataProcess.reqData(UpdateLngLat.class, params, null,
						new IResponseListener() {

							@Override
							public void onSuccess(Object arg0) {
								System.out.println("定位结束");
							}

							@Override
							public void onRuning(Object arg0) {

							}

							@Override
							public void onReqStart() {

							}

							@Override
							public void onFinish() {

							}

							@Override
							public void onFailure(Object arg0) {

							}
						});
			}
		}

		@Override
		public void onReceivePoi(BDLocation poiLocation) {
			if (poiLocation == null) {
				return;
			}
			StringBuffer sb = new StringBuffer(256);
			sb.append("Poi time : ");
			sb.append(poiLocation.getTime());
			sb.append("\nerror code : ");
			sb.append(poiLocation.getLocType());
			sb.append("\nlatitude : ");
			sb.append(poiLocation.getLatitude());
			sb.append("\nlontitude : ");
			sb.append(poiLocation.getLongitude());
			sb.append("\nradius : ");
			sb.append(poiLocation.getRadius());
			if (poiLocation.getLocType() == BDLocation.TypeNetWorkLocation) {
				sb.append("\naddr : ");
				sb.append(poiLocation.getAddrStr());
			}
			if (poiLocation.hasPoi()) {
				sb.append("\nPoi:");
				sb.append(poiLocation.getPoi());
			} else {
				sb.append("noPoi information");
			}
		}
	}

}
